---
description: Custom Hook Guidelines
globs: 
alwaysApply: false
---
---
description: Create custom React hooks when encapsulating reusable stateful logic to improve code organization and reusability
globs: /hooks/**/*.{ts,tsx}
tags: [react, hooks, data-fetching, swr]
priority: 2
version: 1.0.0
---

# Custom Hook Guidelines

## Context
- When encapsulating reusable stateful logic
- When implementing data fetching from API endpoints
- When managing complex UI interactions
- When extracting common functionality used across multiple components

## Requirements
- Place all custom hooks in the `src/hooks/` directory
- Name hooks with the `use` prefix (e.g., `useAccounts.ts`, `useUserProfile.ts`)
- For data fetching, wrap `useSWR` following patterns in [201-data-fetching.mdc](mdc:.cursor/rules/201-data-fetching.mdc)
- Create dedicated hooks for specific data types (e.g., `useAccounts`, `useLabels`)
- Ensure hooks return appropriate states (data, loading, error)
- Keep hooks focused on a single responsibility
- Export proper TypeScript types for the hook's return value
- Handle error states consistently

## Examples

<example>
```typescript
// apps/web/hooks/useAccounts.ts
import useSWR from 'swr';
import type { Account } from '@/types';

export interface UseAccountsResult {
  accounts: Account[] | undefined;
  isLoading: boolean;
  error: Error | undefined;
  mutate: () => Promise<Account[] | undefined>;
}

export function useAccounts(): UseAccountsResult {
  const { 
    data, 
    error, 
    isLoading, 
    mutate 
  } = useSWR<Account[]>('/api/accounts');

  return {
    accounts: data,
    isLoading,
    error,
    mutate,
  };
}
```
Good example: Properly named hook in the correct location that wraps SWR for data fetching, has appropriate TypeScript types, and returns all necessary states.
</example>

<example>
```typescript
// apps/web/hooks/useFormSubmit.ts
import { useState, useCallback } from 'react';
import { toastError, toastSuccess } from '@/components/Toast';

export interface UseFormSubmitOptions<T, R> {
  action: (data: T) => Promise<R>;
  onSuccess?: (result: R) => void;
  successMessage?: string;
}

export function useFormSubmit<T, R>({ 
  action, 
  onSuccess, 
  successMessage = 'Saved successfully' 
}: UseFormSubmitOptions<T, R>) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = useCallback(async (data: T) => {
    setIsSubmitting(true);
    try {
      const result = await action(data);
      
      if ('serverError' in result && result.serverError) {
        toastError({ 
          title: 'Error', 
          description: result.serverError 
        });
      } else {
        if (successMessage) {
          toastSuccess({ description: successMessage });
        }
        if (onSuccess) {
          onSuccess(result as R);
        }
      }
      
      return result;
    } finally {
      setIsSubmitting(false);
    }
  }, [action, onSuccess, successMessage]);
  
  return {
    isSubmitting,
    handleSubmit,
  };
}
```
Good example: A utility hook that focuses on a single responsibility (form submission handling), properly handles loading state, and incorporates toast notifications for success/error.
</example>

<example type="invalid">
```typescript
// src/components/UserProfile/hooks.ts
// WRONG: Hook is not in the correct directory

import { useState, useEffect } from 'react';

// WRONG: Missing "use" prefix
export function fetchUserData(userId: string) {
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  
  // WRONG: Not using SWR for data fetching
  useEffect(() => {
    fetch(`/api/users/${userId}`)
      .then(res => res.json())
      .then(data => {
        setUserData(data);
        setLoading(false);
      })
      .catch(err => {
        console.error(err);
        setLoading(false);
      });
  }, [userId]);
  
  // WRONG: Mixing multiple responsibilities in one hook
  const updateUserName = (name: string) => {
    fetch(`/api/users/${userId}`, {
      method: 'PATCH',
      body: JSON.stringify({ name }),
    });
  };
  
  return { userData, loading, updateUserName };
}
```
Invalid example: The hook is in the wrong location, doesn't use the "use" prefix, doesn't use SWR for data fetching, mixes multiple responsibilities, and has poor error handling.
</example>