---
description: Handle form validation
globs: 
alwaysApply: false
---
---
description: Use React Hook Form with Zod when creating forms to ensure consistent client-server validation
globs: src/**/*.{jsx,tsx}
tags: [forms, validation, react, zod]
priority: 2
version: 1.0.0
---

# Form Handling

## Context
- When creating forms in React components
- When implementing data validation
- When handling form submissions with server actions

## Requirements
- Use React Hook Form library for all form state management
- Implement Zod schemas for validation rules
- Apply identical validation on both client and server
- Display inline validation errors next to form fields
- Handle submission state and loading indicators
- Provide toast notifications for success/error states
- Use consistent form styling with proper spacing

## Examples

<example>
```tsx
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, SubmitHandler } from "react-hook-form";
import { useCallback } from "react";
import { Input } from "@/components/Input";
import { Button } from "@/components/ui/button";
import { toastSuccess, toastError } from "@/components/Toast";
import { createExampleAction } from "@/utils/actions/example";
import { type CreateExampleBody } from "@/utils/actions/example.validation";

export const ExampleForm = ({ emailAccountId }: { emailAccountId: string }) => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<CreateExampleBody>({
    resolver: zodResolver(schema),
  });

  const onSubmit: SubmitHandler<CreateExampleBody> = useCallback(
    async (data) => {
      const result = await createExampleAction(emailAccountId, data);
      
      if (result?.serverError) {
        toastError({ title: "Error", description: result.serverError });
      } else {
        toastSuccess({ description: "Created example!" });
      }
    },
    [emailAccountId]
  );

  return (
    <form className="max-w-sm space-y-4" onSubmit={handleSubmit(onSubmit)}>
      <Input
        type="email"
        name="email"
        label="Email"
        registerProps={register("email", { required: true })}
        error={errors.email}
      />
      <Button type="submit" loading={isSubmitting}>
        Save
      </Button>
    </form>
  );
};
```
Properly implements React Hook Form with Zod validation, handles loading states, and shows validation errors. Server action handles the same validation schema.
</example>

<example type="invalid">
```tsx
export const BadExampleForm = ({ emailAccountId }) => {
  const [email, setEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    
    // Missing Zod validation
    try {
      await fetch("/api/example", {
        method: "POST",
        body: JSON.stringify({ email, emailAccountId }),
      });
      alert("Success!");
    } catch (err) {
      setError("Something went wrong");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Email:</label>
        <input 
          type="email" 
          value={email} 
          onChange={(e) => setEmail(e.target.value)} 
        />
        {error && <span>{error}</span>}
      </div>
      <button disabled={isLoading}>
        {isLoading ? "Loading..." : "Save"}
      </button>
    </form>
  );
};
```
Invalid: Uses raw React state instead of React Hook Form, lacks Zod validation, doesn't use shared validation between client and server, and doesn't use project UI components.
</example>