---
description: 
globs: 
alwaysApply: false
---
---
description: Maintain project memory in learned-memories.mdc when discovering new project conventions to ensure consistent AI assistance
globs: **/*
tags: [memory, ai-behavior, project-conventions]
priority: 1
version: 1.0.0
---

# AI Memory Management

## Context
- When learning new project-specific information during conversations
- When user expresses preferences or establishes conventions
- When technical decisions are made that should persist across sessions
- When repetitive questions or inconsistent suggestions need to be avoided

## Requirements
- Store all project-specific knowledge in `.cursor/rules/learned-memories.mdc`
- Check existing memory before making suggestions or proposing solutions
- Update memory file when new information is learned or preferences are expressed
- Categorize remembered information into User Preferences, Technical Decisions, and Project Conventions
- Keep memory entries concise, specific, and actionable
- Propose memory updates explicitly to users for confirmation
- Never contradict established memory entries unless explicitly instructed by the user

## Examples

<example>
When the user states a project convention:

User: "We've decided to use Tailwind v4 for this project, not v3."

AI response:
"I'll update our project memory with this information. Tailwind v4 will be used for styling. I'll reference the v4 documentation for any Tailwind-related suggestions.

Would you like me to update the project memory file with this decision?"

Memory file update:
```markdown
## Technical Decisions
- **CSS Framework:** Tailwind v4 is used. Ensure usage aligns with v4 documentation and practices, noting differences from v3.
```
</example>

<example>
When consulting memory before making suggestions:

User: "How should I style this button component?"

AI process (internal):
1. Check `learned-memories.mdc` for styling conventions
2. Find entry: "**CSS Framework:** Tailwind v4 is used"
3. Base response on Tailwind v4 documentation

AI response:
"Based on our project conventions, I recommend using Tailwind v4 classes for the button:

```tsx
<button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
  Click me
</button>
```

This follows our established project convention of using Tailwind v4 for styling."
</example>

<example type="invalid">
User: "We prefer to use descriptive variable names instead of shortened ones."

AI response:
"I understand. I'll use descriptive variable names in my suggestions.

function calculateTotal(arr) {
  let t = 0;
  for (let i = 0; i < arr.length; i++) {
    t += arr[i];
  }
  return t;
}"
</example>

The structure of the memory file (`.cursor/rules/learned-memories.mdc`) should be:

```markdown
# Project Memory

This file stores project-specific knowledge, conventions, and user preferences learned by the AI assistant.

## User Preferences
- [Preference 1]
- [Preference 2]

## Technical Decisions
- [Decision 1]
- [Decision 2]

## Project Conventions
- [Convention 1]
- [Convention 2]
```