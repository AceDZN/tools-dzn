---
description: Data Fetching instructions
globs:
alwaysApply: false
---

---

description: Use SWR for data fetching when accessing API to ensure efficient caching and revalidation
globs: src/\*_/_.{ts,tsx,js,jsx}
tags: [data-fetching, swr, api, next]
priority: 2
version: 1.0.0

---

# Data Fetching

## Context

- When fetching data from API endpoints
- When determining client-side vs server-side data fetching
- When implementing data mutation with error handling

## Requirements

- Use SWR as the default data fetching method for client components
- Only use Server Components for data fetching when SWR is not suitable
- Fetch data inline in server files without SWR
- Use Next.js server actions for data mutations
- Implement consistent error handling with toast notifications
- Include loading states when fetching data
- Type all API responses for better type safety

## Examples

<example>
```typescript
// Client component with SWR
import useSWR from 'swr';
import { useSearchParams } from 'next/navigation';
import type { PlanHistoryResponse } from '@/types';

const PlanHistory = () => {
const searchParams = useSearchParams();
const page = searchParams.get("page") || "1";

const { data, isLoading, error } = useSWR<PlanHistoryResponse>(
`/api/user/planned/history?page=${page}`
);

if (isLoading) return <LoadingSpinner />;
if (error) return <ErrorMessage message={error.message} />;

return (

<div>
{data?.items.map(item => (
<HistoryItem key={item.id} item={item} />
))}
</div>
);
};

````
Properly implements SWR for data fetching with loading and error states, and uses URL search params for pagination.
</example>

<example>
```typescript
// Error handling with server actions
import { toastError, toastSuccess } from "@/components/Toast";
import { testAiCustomContentAction } from "@/utils/actions";

const FormComponent = () => {
  const onSubmit: SubmitHandler<TestRulesInputs> = useCallback(async (data) => {
    const result = await testAiCustomContentAction({ content: data.message });

    if (result?.serverError) {
      toastError({
        title: "Error testing email",
        description: result?.serverError || "",
      });
    } else {
      toastSuccess({ description: "Saved!" });
    }
  }, []);

  return (/* Form JSX */);
};
````

Correctly implements error handling for server actions using the standard toast notification pattern.
</example>

<example type="invalid">
```typescript
// Don't use fetch directly without SWR in client components
const BadComponent = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const response = await fetch('/api/user/data');
        const result = await response.json();
        setData(result);
      } catch (error) {
        console.error('Failed to fetch data', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, []);

return (/_ Component JSX _/);
};

````
Invalid: Uses raw fetch in useEffect instead of SWR, resulting in no automatic revalidation, caching, or consistent loading/error states.
</example>```

````
