---
description: UI component and styling guidelines
globs: 
alwaysApply: false
---
---
description: Use Shadcn UI and Tailwind CSS when creating UI components to ensure consistent styling and responsive design
globs: src/**/*.{tsx,jsx}
tags: [ui, components, shadcn, tailwind, styling]
priority: 2
version: 1.0.0
---

# UI Components and Styling

## Context
- When creating new UI components
- When implementing responsive design
- When handling loading states
- When building form elements
- When displaying images

## Requirements
- Use Shadcn UI as the primary component library
- Style components with Tailwind CSS following mobile-first approach
- Install new Shadcn components using `npx shadcn@latest add {X}`
- Use next/image for optimized image loading and display
- Implement LoadingContent component for consistent loading states
- Use standard Input component structure for form fields
- Support textarea fields with autosizeTextarea property

## Examples

<example>
```tsx
// Button component using Shadcn UI
import { Button } from "@/components/ui/button";

export const SubmitButton = ({ loading, children }) => (
  <Button type="submit" disabled={loading}>
    {loading ? <Spinner className="mr-2 h-4 w-4" /> : null}
    {children}
  </Button>
);
```
Properly implements a Button component using Shadcn UI with loading state.
</example>

<example>
```tsx
// Card with loading state
import { Card } from "@/components/ui/card";
import { LoadingContent } from "@/components/LoadingContent";
import useSWR from "swr";
import type { DataResponse } from "@/types";

const MyComponent = () => {
  const { data, isLoading, error } = useSWR<DataResponse>("/api/data");
  
  return (
    <Card className="p-4">
      <LoadingContent loading={isLoading} error={error}>
        {data && <DataDisplay data={data} />}
      </LoadingContent>
    </Card>
  );
};
```
Correctly implements loading state using the LoadingContent component with SWR.
</example>

<example>
```tsx
// Form field with validation
import { Input } from "@/components/Input";

const FormComponent = () => {
  const { register, formState: { errors } } = useForm();
  
  return (
    <form>
      <Input
        type="email"
        name="email"
        label="Email"
        registerProps={register("email", { required: true })}
        error={errors.email}
      />
      
      <Input
        type="text"
        autosizeTextarea
        rows={3}
        name="message"
        placeholder="Enter your message"
        registerProps={register("message", { required: true })}
        error={errors.message}
      />
    </form>
  );
};
```
Correctly implements form inputs with validation, including a textarea with autosize.
</example>

<example type="invalid">
```tsx
// Don't use raw HTML elements without Shadcn components
const InvalidForm = () => (
  <div>
    <label>Email:</label>
    <input 
      type="email"
      className="border p-2 rounded" 
    />
    
    <label>Message:</label>
    <textarea 
      className="border p-2 rounded"
      rows={3}
    ></textarea>
    
    <button className="bg-blue-500 text-white p-2 rounded">
      Submit
    </button>
  </div>
);
```
Invalid: Uses raw HTML elements with direct Tailwind classes instead of Shadcn UI components.
</example>

## Installation

To install new Shadcn components:

```sh
npx shadcn@latest add COMPONENT
```

Example:
```sh
npx shadcn@latest add button
```