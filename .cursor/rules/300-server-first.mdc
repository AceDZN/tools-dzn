---
description: 
globs: 
alwaysApply: true
---
# Server-First Development Guidelines

## Core Principles

1. **Server Components by Default**: All pages and layouts should be server components unless they specifically require client-side features.
2. **Data Fetching on Server**: Fetch data on the server whenever possible. Use server components and server actions for data retrieval.
3. **Client Components at Leaf Nodes**: Only use client components at the lowest level of the component tree where interactivity is needed.
4. **Progressive Enhancement**: Design components to work without JavaScript first, then enhance with client-side features.

## Page Structure

```
src/app/(routes)/some-feature/
├── page.tsx            # Server Component (async)
├── layout.tsx          # Server Component
└── components/         # Feature-specific components
    ├── ServerPart.tsx  # Server Component
    └── ClientPart.tsx  # 'use client' Component
```

## Server Components

Server Components should:
- Handle data fetching
- Perform server-side operations
- Pass data down to client components
- Handle middleware and authorization logic
- Use async/await directly in the component

```tsx
// page.tsx (Server Component)
import { SomeClientComponent } from '@/components/client/SomeClientComponent';
import { getServerData } from '@/lib/server-api';

export default async function Page({ params }) {
  // Fetch data on the server
  const data = await getServerData(params.id);
  
  // Pass data to client component
  return (
    <div className="container">
      <SomeClientComponent initialData={data} />
    </div>
  );
}
```

## Client Components

Client components should:
- Be in dedicated files with 'use client' directive at the top
- Be placed in a `client/` subdirectory when possible
- Handle only UI interactivity, state, and effects
- Receive data from server components as props
- Be as small and focused as possible

```tsx
// components/client/SomeClientComponent.tsx
'use client';

import { useState } from 'react';

interface SomeClientComponentProps {
  initialData: any;
}

export function SomeClientComponent({ initialData }: SomeClientComponentProps) {
  const [data, setData] = useState(initialData);
  
  // Client-side interactivity
  const handleClick = () => {
    // ...
  };
  
  return (
    // ...component JSX
  );
}
```

## Data Fetching

### Server-Side Data Fetching (Preferred)

Use direct database access or server APIs in server components:

```tsx
// In server component
import { db } from '@/lib/db';

export default async function Page() {
  const data = await db.query(...);
  return <Component data={data} />;
}
```

### Client-Side Data Fetching (When Necessary)

Use SWR or React Query for client-side data fetching when needed:

```tsx
'use client';

import useSWR from 'swr';
import { fetcher } from '@/lib/fetcher';

export function ClientComponent() {
  const { data, error, isLoading } = useSWR('/api/data', fetcher);
  
  if (isLoading) return <LoadingComponent />;
  if (error) return <ErrorComponent error={error} />;
  
  return <DataDisplay data={data} />;
}
```

## Server Actions

Use server actions for form handling and mutations instead of API routes:

```tsx
// app/actions.ts
'use server';

import { db } from '@/lib/db';

export async function updateData(formData: FormData) {
  const data = Object.fromEntries(formData.entries());
  await db.update(data);
  return { success: true };
}
```

## Best Practices

1. **Performance Optimization**:
   - Use `loading.tsx` and `error.tsx` for streaming and error handling
   - Implement proper suspense boundaries
   - Consider using React Server Components for dynamic content

2. **Security**:
   - Keep sensitive operations and data on the server
   - Validate all input data on the server
   - Never expose API keys or secrets to the client

3. **Code Organization**:
   - Keep server-only code in files that are not imported by client components
   - Use a clear naming convention for client components (e.g., suffix with "Client")
   - Organize related server actions together

4. **Avoid Anti-Patterns**:
   - Don't use `useState` or `useEffect` in server components
   - Don't convert a page to a client component just to use a single hook
   - Don't fetch data in client components when it could be passed from a server component
   - Avoid mixing server and client code in the same component
